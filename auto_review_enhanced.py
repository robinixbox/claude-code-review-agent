#!/usr/bin/env python
"""
Script d'ex√©cution autonome am√©lior√© pour l'agent de revue de code
Permet l'ex√©cution via GitHub Actions ou en ligne de commande
Inclut des logs d√©taill√©s et une meilleure gestion des erreurs
"""
import os
import sys
import json
import time
import argparse
import ast
import logging
import traceback
from datetime import datetime

# Configuration du logger
def setup_logger(debug_mode=False):
    """Configure le syst√®me de logging"""
    level = logging.DEBUG if debug_mode else logging.INFO
    
    # Format des logs
    log_format = '%(asctime)s [%(levelname)s] %(message)s'
    date_format = '%Y-%m-%d %H:%M:%S'
    
    # Configuration du logger
    logging.basicConfig(
        level=level,
        format=log_format,
        datefmt=date_format,
        handlers=[
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # Logger personnalis√© pour les √©tapes importantes
    logger = logging.getLogger('code_review')
    
    # Afficher la configuration
    if debug_mode:
        logger.debug("üîç Mode DEBUG activ√©")
    
    return logger

def parse_args():
    """Parse les arguments de ligne de commande"""
    parser = argparse.ArgumentParser(description="Agent de revue de code autonome am√©lior√©")
    parser.add_argument("--repo", type=str, help="URL du d√©p√¥t GitHub √† analyser")
    parser.add_argument("--target", type=str, help="Nom du fichier ou du dossier √† examiner")
    parser.add_argument("--config", type=str, help="Chemin vers un fichier de configuration JSON")
    parser.add_argument("--debug", action="store_true", help="Activer le mode d√©bogage (plus de logs)")
    parser.add_argument("--timeout", type=int, default=300, help="Timeout pour les appels API en secondes (d√©faut: 300)")
    return parser.parse_args()

def load_config(config_path, logger):
    """Charge la configuration depuis un fichier JSON"""
    try:
        logger.info(f"üìÇ Chargement de la configuration depuis {config_path}")
        with open(config_path, 'r') as f:
            config = json.load(f)
        logger.debug(f"‚úÖ Configuration charg√©e: {json.dumps(config, indent=2)}")
        return config
    except FileNotFoundError:
        logger.error(f"‚ùå Fichier de configuration non trouv√©: {config_path}")
        return None
    except json.JSONDecodeError:
        logger.error(f"‚ùå Erreur de format JSON dans le fichier de configuration: {config_path}")
        return None
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du chargement de la configuration: {e}")
        if logger.level == logging.DEBUG:
            logger.debug(f"Traceback: {traceback.format_exc()}")
        return None

def verify_environment_vars(logger):
    """V√©rifie que les variables d'environnement n√©cessaires sont d√©finies"""
    required_vars = ["ANTHROPIC_API_KEY", "GITHUB_API_KEY"]
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå Variables d'environnement manquantes: {', '.join(missing_vars)}")
        return False
    
    optional_vars = ["GITHUB_USERNAME", "NOTION_API_KEY", "NOTION_PAGE_ID"]
    for var in optional_vars:
        if not os.getenv(var):
            logger.warning(f"‚ö†Ô∏è Variable d'environnement optionnelle non d√©finie: {var}")
    
    logger.info("‚úÖ Variables d'environnement v√©rifi√©es")
    return True

def main():
    """Fonction principale"""
    # Parse les arguments
    args = parse_args()
    
    # Configure le logger
    logger = setup_logger(args.debug)
    
    # En-t√™te
    logger.info("=" * 50)
    logger.info("ü§ñ AGENT AUTONOME DE REVUE DE CODE (VERSION AM√âLIOR√âE)")
    logger.info("=" * 50)
    
    # V√©rifier les variables d'environnement
    if not verify_environment_vars(logger):
        return 1
    
    # Charger la configuration depuis un fichier si sp√©cifi√©
    config = None
    if args.config:
        config = load_config(args.config, logger)
        if not config:
            return 1
    
    # D√©terminer l'URL du d√©p√¥t et le chemin cible
    repo_url = args.repo if args.repo else (config.get('repo_url') if config else None)
    target_path = args.target if args.target else (config.get('target_path') if config else None)
    
    if not repo_url:
        logger.error("‚ùå URL du d√©p√¥t GitHub non sp√©cifi√©e. Utilisez --repo ou un fichier de configuration.")
        return 1
    
    if not target_path:
        logger.error("‚ùå Chemin cible non sp√©cifi√©. Utilisez --target ou un fichier de configuration.")
        return 1
    
    # Extraire le propri√©taire et le d√©p√¥t √† partir de l'URL GitHub
    try:
        logger.info(f"üîç Analyse de l'URL GitHub: {repo_url}")
        split_url = repo_url.split('/')
        owner = split_url[3]
        repo = split_url[4].split('.')[0]  # Supprimer l'extension .git si pr√©sente
        logger.info(f"‚úÖ Propri√©taire: {owner}, D√©p√¥t: {repo}")
    except IndexError:
        logger.error("‚ùå URL GitHub invalide. Format attendu: https://github.com/username/repository")
        return 1
    
    # Importer les modules n√©cessaires
    try:
        from claude_code_reviewer import get_file_tree, global_path, create_notion_page, Agents, Tasks, ReviewCrew
        logger.info("‚úÖ Modules import√©s avec succ√®s")
    except ImportError as e:
        logger.error(f"‚ùå Erreur d'importation des modules: {e}")
        logger.error("‚ö†Ô∏è Assurez-vous que toutes les d√©pendances sont install√©es (pip install -r requirements.txt)")
        return 1
    
    # R√©cup√©rer la structure arborescente du d√©p√¥t
    logger.info(f"üîç R√©cup√©ration de la structure du d√©p√¥t {owner}/{repo}...")
    start_time = time.time()
    try:
        get_file_tree(owner=owner, repo=repo)
        elapsed_time = time.time() - start_time
        logger.info(f"‚úÖ Structure du d√©p√¥t r√©cup√©r√©e en {elapsed_time:.2f} secondes")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la r√©cup√©ration de la structure du d√©p√¥t: {e}")
        if logger.level == logging.DEBUG:
            logger.debug(f"Traceback: {traceback.format_exc()}")
        return 1
    
    if not global_path:
        logger.error("‚ùå Impossible de r√©cup√©rer la structure du d√©p√¥t. V√©rifiez vos identifiants et l'URL.")
        return 1
    
    # Cr√©er une page Notion si les cl√©s API sont configur√©es
    page_id = None
    notion_api_key = os.getenv("NOTION_API_KEY")
    notion_page_id = os.getenv("NOTION_PAGE_ID")
    
    if notion_api_key and notion_page_id:
        try:
            logger.info("üîç Cr√©ation d'une page Notion...")
            page_id = create_notion_page(project_name=repo)
            if page_id:
                logger.info(f"‚úÖ Page Notion cr√©√©e avec l'ID: {page_id}")
            else:
                logger.warning("‚ö†Ô∏è √âchec de la cr√©ation de la page Notion")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Erreur lors de la cr√©ation de la page Notion: {e}")
            if logger.level == logging.DEBUG:
                logger.debug(f"Traceback: {traceback.format_exc()}")
    else:
        logger.info("‚ÑπÔ∏è Exportation vers Notion d√©sactiv√©e (cl√©s API manquantes)")
    
    # Importer l'agent de chemin pour trouver les fichiers correspondants
    path_agent = Agents.path_agent()
    path_task = Tasks.get_file_path_task(agent=path_agent, filetree=global_path, user_input=target_path)
    
    logger.info(f"üîç Recherche des fichiers correspondant √† '{target_path}'...")
    try:
        paths_output = path_task.execute()
        logger.debug(f"R√©sultat brut de la recherche: {paths_output}")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la recherche des fichiers: {e}")
        if logger.level == logging.DEBUG:
            logger.debug(f"Traceback: {traceback.format_exc()}")
        return 1
    
    try:
        paths = ast.literal_eval(paths_output)
        
        if not paths:
            logger.error(f"‚ùå Aucun fichier trouv√© correspondant √† '{target_path}'")
            return 1
            
        logger.info(f"‚úÖ {len(paths)} fichier(s) trouv√©(s): {', '.join(paths)}")
        
        # Analyser chaque fichier un par un
        for i, path in enumerate(paths):
            logger.info(f"üìÑ ({i+1}/{len(paths)}) Analyse de {path}...")
            
            # Ex√©cuter l'√©quipe de revue
            start_time = time.time()
            try:
                review_crew = ReviewCrew(owner=owner, repo=repo, page_id=page_id, path=path)
                result = review_crew.run()
                elapsed_time = time.time() - start_time
                
                # Afficher les r√©sultats
                logger.info(f"‚úÖ Revue termin√©e pour {path} en {elapsed_time:.2f} secondes")
                logger.info(f"R√©sultat: {result}")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'analyse de {path}: {e}")
                if logger.level == logging.DEBUG:
                    logger.debug(f"Traceback: {traceback.format_exc()}")
        
        logger.info(f"‚úÖ Toutes les revues sont termin√©es! ({len(paths)} fichier(s) analys√©(s))")
        if page_id:
            logger.info(f"üìù Les r√©sultats ont √©t√© export√©s vers Notion")
    
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'analyse: {e}")
        if logger.level == logging.DEBUG:
            logger.debug(f"Traceback: {traceback.format_exc()}")
        return 1
    
    return 0

if __name__ == "__main__":
    # Capture l'heure de d√©but pour calculer le temps total d'ex√©cution
    start_time = time.time()
    
    # Ex√©cution de la fonction principale avec gestion des exceptions non captur√©es
    try:
        exit_code = main()
        elapsed_time = time.time() - start_time
        print(f"\n‚è±Ô∏è Temps total d'ex√©cution: {elapsed_time:.2f} secondes")
        print(f"üìÖ Termin√© le {datetime.now().strftime('%Y-%m-%d √† %H:%M:%S')}")
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Arr√™t manuel de l'ex√©cution")
        sys.exit(130)
    except Exception as e:
        print(f"\n‚ùå Erreur non captur√©e: {e}")
        print(f"Traceback: {traceback.format_exc()}")
        sys.exit(1)
