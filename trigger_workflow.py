#!/usr/bin/env python
"""
Script pour d√©clencher le workflow GitHub Actions de revue de code.
Ce script utilise l'API GitHub pour d√©clencher manuellement le workflow
sans avoir besoin d'utiliser l'interface web de GitHub.
"""
import os
import sys
import json
import argparse
import requests
import time
from datetime import datetime

def parse_args():
    """Parse les arguments de ligne de commande"""
    parser = argparse.ArgumentParser(description="D√©clencheur de workflow GitHub Actions")
    parser.add_argument("--workflow", type=str, default="code-review-enhanced.yml", 
                       help="Nom du fichier de workflow √† d√©clencher (d√©faut: code-review-enhanced.yml)")
    parser.add_argument("--repo", type=str, default="robinixbox/claude-code-review-agent", 
                       help="D√©p√¥t au format owner/repo (d√©faut: robinixbox/claude-code-review-agent)")
    parser.add_argument("--repo-url", type=str, default="https://github.com/robinixbox/claude-code-review-agent", 
                       help="URL du d√©p√¥t √† analyser (d√©faut: https://github.com/robinixbox/claude-code-review-agent)")
    parser.add_argument("--target", type=str, default="auto_review_enhanced.py", 
                       help="Fichier ou dossier √† analyser (d√©faut: auto_review_enhanced.py)")
    parser.add_argument("--debug", action="store_true", help="Activer le mode d√©bogage")
    parser.add_argument("--wait", action="store_true", help="Attendre et afficher l'√©tat du workflow")
    parser.add_argument("--token", type=str, help="Token GitHub (par d√©faut: utilise GITHUB_API_KEY de l'environnement)")
    return parser.parse_args()

def trigger_workflow(owner, repo, workflow_id, inputs, token):
    """D√©clenche un workflow GitHub Actions via l'API"""
    url = f"https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json",
        "Content-Type": "application/json"
    }
    data = {
        "ref": "main",  # Branche sur laquelle d√©clencher le workflow
        "inputs": inputs
    }
    
    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        return True
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur lors du d√©clenchement du workflow: {e}")
        if hasattr(e, 'response') and e.response:
            print(f"Code de statut: {e.response.status_code}")
            try:
                error_data = e.response.json()
                print(f"D√©tails de l'erreur: {json.dumps(error_data, indent=2)}")
            except:
                print(f"R√©ponse: {e.response.text}")
        return False

def get_workflow_runs(owner, repo, workflow_id, token, per_page=10):
    """R√©cup√®re les derni√®res ex√©cutions d'un workflow"""
    url = f"https://api.github.com/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs?per_page={per_page}"
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des ex√©cutions du workflow: {e}")
        return None

def monitor_workflow_run(owner, repo, run_id, token, interval=10, max_attempts=30):
    """Surveille l'√©tat d'une ex√©cution de workflow"""
    url = f"https://api.github.com/repos/{owner}/{repo}/actions/runs/{run_id}"
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    attempts = 0
    while attempts < max_attempts:
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            run_data = response.json()
            
            status = run_data.get('status')
            conclusion = run_data.get('conclusion')
            
            print(f"√âtat: {status}, Conclusion: {conclusion or 'En cours'}")
            
            if status == 'completed':
                run_url = run_data.get('html_url')
                print(f"URL de l'ex√©cution: {run_url}")
                return conclusion == 'success'
            
            time.sleep(interval)
            attempts += 1
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erreur lors de la surveillance du workflow: {e}")
            return False
    
    print("‚ö†Ô∏è D√©lai d'attente d√©pass√© pour l'ex√©cution du workflow")
    return False

def main():
    """Fonction principale"""
    # Parse les arguments
    args = parse_args()
    
    # En-t√™te
    print("=" * 50)
    print("üöÄ D√âCLENCHEUR DE WORKFLOW GITHUB ACTIONS")
    print("=" * 50)
    
    # R√©cup√©rer le token GitHub
    token = args.token or os.getenv("GITHUB_API_KEY")
    if not token:
        print("‚ùå Token GitHub non sp√©cifi√©. Utilisez --token ou d√©finissez GITHUB_API_KEY dans l'environnement.")
        return 1
    
    # Extraire propri√©taire et d√©p√¥t
    try:
        owner, repo = args.repo.split('/')
    except ValueError:
        print("‚ùå Format de d√©p√¥t invalide. Utilisez le format 'owner/repo'.")
        return 1
    
    # Pr√©parer les inputs pour le workflow
    inputs = {
        "repo_url": args.repo_url,
        "target_path": args.target,
        "debug_mode": str(args.debug).lower()
    }
    
    print(f"üìã D√©clenchement du workflow {args.workflow} sur {args.repo}")
    print(f"   - URL du d√©p√¥t: {args.repo_url}")
    print(f"   - Cible: {args.target}")
    print(f"   - Mode d√©bogage: {'activ√©' if args.debug else 'd√©sactiv√©'}")
    
    # D√©clencher le workflow
    if not trigger_workflow(owner, repo, args.workflow, inputs, token):
        return 1
    
    print("‚úÖ Workflow d√©clench√© avec succ√®s!")
    
    # Surveillancer l'ex√©cution du workflow si demand√©
    if args.wait:
        print("\n‚è≥ Surveillance de l'ex√©cution du workflow...")
        time.sleep(5)  # Attendre que le workflow d√©marre
        
        # R√©cup√©rer la derni√®re ex√©cution du workflow
        runs_data = get_workflow_runs(owner, repo, args.workflow, token, per_page=5)
        if not runs_data or 'workflow_runs' not in runs_data or not runs_data['workflow_runs']:
            print("‚ùå Impossible de r√©cup√©rer les ex√©cutions du workflow.")
            return 1
        
        # Trouver la derni√®re ex√©cution d√©clench√©e manuellement
        for run in runs_data['workflow_runs']:
            if run['event'] == 'workflow_dispatch':
                run_id = run['id']
                print(f"üîç Surveillance de l'ex√©cution #{run_id}...")
                if monitor_workflow_run(owner, repo, run_id, token):
                    print("‚úÖ Workflow termin√© avec succ√®s!")
                else:
                    print("‚ùå Workflow termin√© avec des erreurs ou annul√©.")
                break
        else:
            print("‚ö†Ô∏è Aucune ex√©cution r√©cente du workflow trouv√©e.")
    
    return 0

if __name__ == "__main__":
    # Capture l'heure de d√©but pour calculer le temps total d'ex√©cution
    start_time = time.time()
    
    # Ex√©cution de la fonction principale
    try:
        exit_code = main()
        elapsed_time = time.time() - start_time
        print(f"\n‚è±Ô∏è Temps total d'ex√©cution: {elapsed_time:.2f} secondes")
        print(f"üìÖ Termin√© le {datetime.now().strftime('%Y-%m-%d √† %H:%M:%S')}")
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Arr√™t manuel de l'ex√©cution")
        sys.exit(130)
    except Exception as e:
        print(f"\n‚ùå Erreur non captur√©e: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        sys.exit(1)
