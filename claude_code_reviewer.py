#!/usr/bin/env python
"""
Agent de revue de code autonome utilisant CrewAI et Claude API
"""
import os
import ast
import base64
import json
import requests
from dotenv import load_dotenv
from textwrap import dedent
from langchain.tools import tool
from crewai import Agent, Task, Crew, Process
from anthropic import Anthropic

# Chargement des variables d'environnement
load_dotenv()

# Configuration des cl√©s API
# Vous pouvez remplacer les cl√©s ci-dessous par vos propres cl√©s ou les mettre dans un fichier .env
ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY", "sk-ant-api03-...")  # Remplacez par votre cl√©
GITHUB_API_KEY = os.getenv("GITHUB_API_KEY", "ghp_CohWQti...")  # Remplacez par votre cl√©
GITHUB_USERNAME = os.getenv("GITHUB_USERNAME", "robinixbox")  # Remplacez par votre nom d'utilisateur

# Configuration d'Anthropic (Claude API)
print("üîå Initialisation de l'API Claude...")
anthropic_client = Anthropic(api_key=ANTHROPIC_API_KEY)

# Variable globale pour stocker la structure du d√©p√¥t
global_path = ""

# Configuration Notion (si la cl√© est pr√©sente)
NOTION_API_KEY = os.getenv("NOTION_API_KEY")
NOTION_PAGE_ID = os.getenv("NOTION_PAGE_ID")
if NOTION_API_KEY:
    from notion_client import Client
    notion = Client(auth=NOTION_API_KEY)
    print("‚úÖ API Notion configur√©e")

def create_notion_page(project_name):
    """
    Cr√©e une page Notion pour stocker les r√©sultats de la revue
    """
    if not NOTION_API_KEY or not NOTION_PAGE_ID:
        print("‚ö†Ô∏è Configuration Notion incompl√®te. Les r√©sultats ne seront pas export√©s.")
        return None
        
    parent = {"type": "page_id", "page_id": NOTION_PAGE_ID}
    properties = {
        "title": {
            "type": "title",
            "title": [{"type": "text", "text": {"content": f"Code review de {project_name}"}}]
        },
    }
    
    try:
        create_page_response = notion.pages.create(parent=parent, properties=properties)
        return create_page_response['id']
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de la page Notion: {e}")
        return None

def get_file_tree(owner, repo, path='', level=0):
    """
    R√©cup√®re et affiche la structure arborescente d'un d√©p√¥t GitHub, en ignorant 
    certains dossiers sp√©cifiques.
    
    Param√®tres:
    - owner: Le nom d'utilisateur du propri√©taire du d√©p√¥t.
    - repo: Le nom du d√©p√¥t.
    - path: Le chemin √† r√©cup√©rer. Laisser vide pour r√©cup√©rer le r√©pertoire racine.
    - level: La profondeur actuelle dans la structure arborescente.
    """
    # R√©pertoires √† ignorer
    ignore_dirs = {'public', 'images', 'media', 'assets', 'node_modules', '.git'}
    global global_path
    
    api_url = f"https://api.github.com/repos/{owner}/{repo}/contents/{path}"
    # Ajout de l'en-t√™te Authorization avec le token
    headers = {'Authorization': f'token {GITHUB_API_KEY}'}
    
    try:
        # Effectue la requ√™te
        response = requests.get(api_url, headers=headers)
        if response.status_code != 200:
            print(f"‚ùå Erreur HTTP {response.status_code}: {response.reason}")
            print(f"URL: {api_url}")
            return
            
        items = response.json()
        
        if isinstance(items, list):
            for item in items:
                # Ignorer les r√©pertoires sp√©cifi√©s
                if item['name'] in ignore_dirs:
                    continue
                
                global_path += f"{' ' * (level * 2)}- {item['name']}\n"
                if item['type'] == 'dir':
                    get_file_tree(owner, repo, item['path'], level + 1)
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration de la structure du d√©p√¥t: {e}")

class Tools:
    """Outils personnalis√©s pour les agents"""
    
    @tool("Add data to notion")
    def add_to_notion(output, page_id):
        """
        Utilis√© pour ajouter des donn√©es √† un document Notion.
        """
        if not NOTION_API_KEY or not page_id:
            return "Notion n'est pas configur√©. Les r√©sultats ne seront pas export√©s."
        
        try:
            children = [
                {
                    "object": "block",
                    "type": "heading_2",
                    "heading_2": {
                        "rich_text": [{"type": "text", "text": {"content": "üöÄ Nom du fichier"}}]
                    }
                },
                {
                    "object": "block",
                    "type": "paragraph",
                    "paragraph": {
                        "rich_text": [{"type": "text", "text": {"content": output[1]}}]
                    }
                },
                {
                    "object": "block",
                    "type": "heading_2",
                    "heading_2": {
                        "rich_text": [{"type": "text", "text": {"content": "üìù Revue"}}]
                    }
                },
                {
                    "object": "block",
                    "type": "paragraph",
                    "paragraph": {
                        "rich_text": [{"type": "text", "text": {"content": output[2]}}]
                    }
                },
                {
                    "object": "block",
                    "type": "heading_2",
                    "heading_2": {
                        "rich_text": [{"type": "text", "text": {"content": "üí° Code am√©lior√©"}}]
                    }
                },
                {
                    "object": "block",
                    "type": "code",
                    "code": {
                        "caption": [],
                        "rich_text": [{
                            "type": "text",
                            "text": {
                                "content": output[3]
                            }
                        }],
                        "language": "python"  # √Ä adapter en fonction du type de fichier
                    }
                },
            ]
            
            add_data_response = notion.blocks.children.append(
                block_id=page_id, children=children
            )
            return "Donn√©es ajout√©es avec succ√®s √† Notion"
        except Exception as e:
            return f"Erreur lors de l'ajout √† Notion: {e}"

    @tool("get file contents from given file path")
    def get_file_contents(path, owner, repo):
        """
        Utilis√© pour obtenir le contenu d'un fichier √† partir du chemin, du propri√©taire 
        du d√©p√¥t et du nom du d√©p√¥t.
        L'URL ressemblera √† https://api.github.com/repos/{owner}/{repo}/{path}
        """
        if path.startswith("https://"):
            api_url = path
        else:
            api_url = f"https://api.github.com/repos/{owner}/{repo}/contents/{path}"
        
        # Ajout de l'en-t√™te Authorization avec le token
        headers = {'Authorization': f'token {GITHUB_API_KEY}', 'X-GitHub-Api-Version': '2022-11-28'}
        
        try:
            # Effectue la requ√™te
            response = requests.get(api_url, headers=headers)
            
            # V√©rifie si la requ√™te a r√©ussi
            if response.status_code == 200:
                file_content = response.json()
                
                # V√©rifie la taille du fichier
                if file_content['size'] > 1000000:  # 1MB en octets
                    return "Ignor√©: Taille du fichier sup√©rieure √† 1 Mo."
                
                # Le contenu est encod√© en Base64, donc on le d√©code
                content_decoded = base64.b64decode(file_content['content'])
                
                # Convertit les octets en cha√Æne de caract√®res
                content_str = content_decoded.decode('utf-8')
                
                # V√©rifie le nombre de lignes dans le fichier
                if len(content_str.split('\n')) > 1000:
                    return "Ignor√©: Le fichier contient plus de 1000 lignes."
                    
                return content_str
            else:
                # G√®re les erreurs (par exemple, fichier non trouv√©, acc√®s refus√©)
                return f"Erreur: {response.status_code} - {response.reason}"
        except Exception as e:
            return f"Erreur lors de la r√©cup√©ration du contenu: {e}"

class Tasks:
    """D√©finition des t√¢ches pour les agents"""
    
    def review_task(agent, repo, context):
        """T√¢che de revue de code"""
        return Task(
            agent=agent,
            description=dedent(
                f"""
                Examine le fichier donn√© et fournis des retours d√©taill√©s sur les points qui ne respectent pas 
                les standards de code de l'industrie.
                Prends le chemin du fichier et son contenu depuis l'agent contentAgent.
                Apporte des modifications au contenu du fichier pour l'am√©liorer et renvoie le contenu modifi√© 
                comme updated_code dans la r√©ponse.
                
                Renvoie les valeurs suivantes dans la r√©ponse :
                project_name: {repo}
                file_path: chemin_du_fichier
                review: revue_ici
                updated_code: contenu mis √† jour du fichier apr√®s modifications
                
                Renvoie la sortie qui suit la structure de tableau ci-dessous, chaque √©l√©ment devant √™tre 
                envelopp√© dans une cha√Æne multilignes.
                Dans le cas d'updated_code, ajoute le code complet sous forme de cha√Æne multiligne.
                Renvoie uniquement le contenu du fichier qui a √©t√© modifi√© dans updated_code ; s'il y a 
                plusieurs modifications dans le contenu du fichier, alors envoie tout le contenu du fichier.
                
                Chaque tableau doit suivre ce format :
                [project_name, file_path, review, updated_code]
                
                Ne renvoie rien d'autre que le tableau au format ci-dessus.
                """),
            context=context,
            expected_output="Un tableau de 4 √©l√©ments au format donn√© dans la description"
        )
        
    def notion_task(agent, context, page_id):
        """T√¢che d'ajout √† Notion"""
        return Task(
            agent=agent,
            description=dedent(f"""
            On te donne un tableau de 4 √©l√©ments et un ID de page, et tu dois ajouter ces donn√©es dans Notion.
            Voici l'ID de la page Notion :
            {page_id}
            Dis 'Donn√©es ajout√©es avec succ√®s √† Notion' en cas de succ√®s, sinon renvoie le tableau donn√©.
            """),
            context=context,
            expected_output="Texte indiquant 'Donn√©es ajout√©es avec succ√®s √† Notion' en cas de succ√®s et 'Impossible d'ajouter des donn√©es √† Notion' en cas d'√©chec"
        )
        
    def get_file_path_task(agent, filetree, user_input):
        """T√¢che de r√©cup√©ration des chemins de fichiers"""
        return Task(
            agent=agent,
            description=dedent(f"""
            On te donne une structure arborescente de dossier et une entr√©e utilisateur, et tu dois d'abord d√©terminer 
            s'il s'agit d'un dossier ou d'un fichier √† partir de la structure arborescente donn√©e.
            
            Suis cette approche :
            - S'il s'agit d'un fichier, renvoie un tableau avec 1 √©l√©ment qui contient le chemin complet de ce fichier 
              dans cette structure de dossier
            - S'il s'agit d'un dossier, renvoie un tableau de chemins des sous-fichiers dans ce dossier ; s'il y a un 
              sous-dossier dans le dossier donn√©, renvoie √©galement les chemins pour ces fichiers
            - Si l'entr√©e utilisateur n'est pas pr√©sente dans la structure arborescente donn√©e, renvoie simplement un 
              tableau vide
              
            Renvoie le chemin COMPLET d'un fichier donn√© dans la structure de dossier donn√©e.
            Par exemple, si la structure arborescente ressemble √† ceci :
            - src
              - components
                - Login.jsx
                - Password.jsx
            - backend
              - api
              
            Alors le chemin complet de Login.jsx sera src/components/Login.jsx
            
            N'ENVOIE PAS tout le contenu du fichier en une seule fois, envoie-le un par un √† reviewAgent.
            
            Voici la structure arborescente du dossier :
            {filetree}
            
            Voici l'entr√©e utilisateur :
            {user_input}
            
            REMARQUE : RENVOIE UNIQUEMENT UN TABLEAU DE CHEMINS SANS TEXTE SUPPL√âMENTAIRE DANS LA R√âPONSE
            """),
            expected_output=dedent("""
            UNIQUEMENT un tableau de chemins
            Par exemple :
            ['src/load/app.jsx', 'client/app/pages/404.js']
            """)
        )
        
    def get_file_content_task(agent, owner, repo, path):
        """T√¢che de r√©cup√©ration du contenu d'un fichier"""
        return Task(
            agent=agent,
            description=dedent(f"""
            On te donne un chemin de fichier et tu dois obtenir le contenu du fichier et le nom du fichier 
            en utilisant l'API GitHub.
            
            Voici le chemin du fichier :
            {path}
            
            Voici le nom du propri√©taire :
            {owner}
            
            Voici le nom du d√©p√¥t :
            {repo}
            
            Ne renvoie rien d'autre que le nom du fichier et le contenu.
            """),
            expected_output="Nom de fichier et contenu du fichier donn√©"
        )

class Agents:
    """D√©finition des agents"""
    
    def review_agent():
        """Agent de revue de code"""
        return Agent(
            role='Senior software developer',
            goal="Effectuer des revues de code sur un fichier donn√© pour v√©rifier s'il correspond aux standards de code de l'industrie",
            backstory="Tu es un d√©veloppeur logiciel senior dans une grande entreprise et tu dois effectuer une revue de code sur un contenu de fichier donn√©.",
            allow_delegation=False,
            verbose=True,
            # Utilisation de Claude API
            llm_config={
                "provider": anthropic_client,
                "model": "claude-3-opus-20240229",
                "temperature": 0.2
            }
        )
        
    def notion_agent():
        """Agent Notion"""
        return Agent(
            role="Expert API Notion et r√©dacteur de contenu",
            goal="Ajouter les donn√©es du tableau donn√© dans le document Notion en utilisant l'outil addToNotion",
            backstory="Tu es un expert de l'API Notion qui peut utiliser l'outil addToNotion et ajouter les donn√©es fournies dans un document Notion",
            allow_delegation=True,
            tools=[Tools.add_to_notion],
            verbose=True,
            # Utilisation de Claude API
            llm_config={
                "provider": anthropic_client,
                "model": "claude-3-haiku-20240307",
                "temperature": 0.1
            }
        )
        
    def path_agent():
        """Agent de chemin de fichier"""
        return Agent(
            role="Extracteur de chemin de fichier",
            goal="Obtenir la structure arborescente du dossier et renvoyer les chemins complets du fichier donn√© ou des fichiers du dossier donn√© au format tableau",
            backstory="Tu es un extracteur de chemin de fichier qui a cr√©√© plusieurs chemins de fichiers √† partir de la structure arborescente donn√©e",
            allow_delegation=False,
            verbose=True,
            # Utilisation de Claude API
            llm_config={
                "provider": anthropic_client,
                "model": "claude-3-haiku-20240307",
                "temperature": 0.1
            }
        )
        
    def content_agent():
        """Agent de contenu"""
        return Agent(
            role="Expert API GitHub",
            goal="Obtenir le contenu du fichier donn√© en utilisant l'API GitHub",
            backstory="Tu es un expert de l'API GitHub qui a extrait de nombreux contenus de fichiers en utilisant l'API de GitHub",
            verbose=True,
            allow_delegation=False,
            tools=[Tools.get_file_contents],
            # Utilisation de Claude API
            llm_config={
                "provider": anthropic_client,
                "model": "claude-3-haiku-20240307",
                "temperature": 0.1
            }
        )

class ReviewCrew:
    """√âquipe de revue de code"""
    
    def __init__(self, owner, repo, page_id, path):
        """Initialisation de l'√©quipe"""
        self.owner = owner
        self.repo = repo
        self.page_id = page_id
        self.path = path
        
    def run(self):
        """Ex√©cution de l'√©quipe"""
        # Agents
        review_agent = Agents.review_agent()
        content_agent = Agents.content_agent()
        notion_agent = Agents.notion_agent() if NOTION_API_KEY else None
        
        # T√¢ches
        content_task = Tasks.get_file_content_task(
            agent=content_agent, 
            owner=self.owner, 
            repo=self.repo, 
            path=self.path
        )
        
        review_task = Tasks.review_task(
            agent=review_agent, 
            repo=self.repo, 
            context=[content_task]
        )
        
        agents = [content_agent, review_agent]
        tasks = [content_task, review_task]
        
        # Ajouter la t√¢che Notion si configur√©e
        if notion_agent and self.page_id:
            notion_task = Tasks.notion_task(
                agent=notion_agent, 
                page_id=self.page_id, 
                context=[review_task]
            )
            tasks.append(notion_task)
            agents.append(notion_agent)
        
        # √âquipe
        crew = Crew(
            agents=agents,
            tasks=tasks,
            verbose=2,  # Tu peux le d√©finir √† 1 ou 2 pour diff√©rents niveaux de journalisation
            process=Process.sequential
        )
        
        # Ex√©cution de l'√©quipe
        result = crew.kickoff()
        return result

def main():
    """Fonction principale"""
    print("=" * 50)
    print("üìù AGENT DE REVUE DE CODE AVEC CLAUDE & CREWAI")
    print("=" * 50)
    
    # V√©rification des cl√©s API
    if not ANTHROPIC_API_KEY:
        print("‚ùå Cl√© API Anthropic (Claude) non trouv√©e. Veuillez configurer la variable d'environnement ANTHROPIC_API_KEY.")
        return
    
    if not GITHUB_API_KEY:
        print("‚ùå Cl√© API GitHub non trouv√©e. Veuillez configurer la variable d'environnement GITHUB_API_KEY.")
        return
    
    # Saisie utilisateur
    github_url = input("URL du d√©p√¥t GitHub √† analyser (ex: https://github.com/username/repository): ")
    user_input = input("Nom du fichier ou du dossier √† examiner: ")
    
    # Extraction du propri√©taire et du d√©p√¥t √† partir de l'URL GitHub
    try:
        split_url = github_url.split('/')
        owner = split_url[3]
        repo = split_url[4]
    except IndexError:
        print("‚ùå URL GitHub invalide. Format attendu: https://github.com/username/repository")
        return
    
    print(f"\nüîç Analyse du d√©p√¥t {owner}/{repo}...")
    
    # R√©cup√©ration de la structure arborescente du d√©p√¥t GitHub
    global global_path
    global_path = ""
    get_file_tree(owner=owner, repo=repo)
    
    if not global_path:
        print("‚ùå Impossible de r√©cup√©rer la structure du d√©p√¥t. V√©rifiez vos identifiants et l'URL.")
        return
    
    print(f"‚úÖ Structure du d√©p√¥t r√©cup√©r√©e")
    
    # Cr√©ation d'une page Notion si les cl√©s sont configur√©es
    page_id = None
    if NOTION_API_KEY and NOTION_PAGE_ID:
        try:
            page_id = create_notion_page(project_name=repo)
            if page_id:
                print(f"‚úÖ Page Notion cr√©√©e pour stocker les r√©sultats")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de la cr√©ation de la page Notion: {e}")
    
    # R√©cup√©ration des chemins de fichiers √† partir de l'entr√©e utilisateur
    path_agent = Agents.path_agent()
    path_task = Tasks.get_file_path_task(agent=path_agent, filetree=global_path, user_input=user_input)
    
    print(f"\nüîç Recherche des fichiers correspondant √† '{user_input}'...")
    paths_output = path_task.execute()
    
    try:
        paths = ast.literal_eval(paths_output)
        
        if not paths:
            print(f"‚ùå Aucun fichier trouv√© correspondant √† '{user_input}'")
            return
            
        print(f"‚úÖ {len(paths)} fichier(s) trouv√©(s)")
        
        # Analyse de chaque fichier un par un
        for i, path in enumerate(paths):
            print(f"\nüìÑ ({i+1}/{len(paths)}) Analyse de {path}...")
            
            # Ex√©cution de l'√©quipe de revue
            review_crew = ReviewCrew(owner=owner, repo=repo, page_id=page_id, path=path)
            result = review_crew.run()
            
            # Affichage des r√©sultats
            print(f"‚úÖ Revue termin√©e pour {path}")
            print(f"R√©sultat: {result}")
        
        print("\n‚úÖ Toutes les revues sont termin√©es!")
        if page_id:
            print(f"üìù Les r√©sultats ont √©t√© export√©s vers Notion")
    
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {e}")

if __name__ == "__main__":
    main()
